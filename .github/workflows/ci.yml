name: Build Release

# 限制并发运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - master
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    strategy:
      # 允许其他任务继续运行，即使某个任务失败
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: x64
            target: x86_64-apple-darwin
          - os: macos-14
            arch: arm64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: arm64
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.arch }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/AppData/Local/pip/Cache
          key: ${{ runner.os }}-${{ matrix.arch }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-pip-

      - name: Cache PyInstaller build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/PyInstaller
            ~/AppData/Local/PyInstaller
          key: ${{ runner.os }}-${{ matrix.arch }}-pyinstaller-${{ hashFiles('gui.spec') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-pyinstaller-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # 确保项目根目录有 requirements.txt
          pip install pyinstaller

      - name: Create icons (macOS)
        if: runner.os == 'macOS'
        run: |
          # 安装 imagemagick 用于图像转换
          brew install imagemagick
          # 将 SVG 转换为 ICNS
          mkdir icon.iconset
          convert -background none -resize 16x16 docs/images/logo-square-256.svg icon.iconset/icon_16x16.png
          convert -background none -resize 32x32 docs/images/logo-square-256.svg icon.iconset/icon_32x32.png
          convert -background none -resize 64x64 docs/images/logo-square-256.svg icon.iconset/icon_64x64.png
          convert -background none -resize 128x128 docs/images/logo-square-256.svg icon.iconset/icon_128x128.png
          convert -background none -resize 256x256 docs/images/logo-square-256.svg icon.iconset/icon_256x256.png
          convert -background none -resize 512x512 docs/images/logo-square-256.svg icon.iconset/icon_512x512.png
          iconutil -c icns icon.iconset -o OCRmyPDF.icns

      - name: Create icons (Windows)
        if: runner.os == 'Windows'
        run: |
          # 安装 ImageMagick
          choco install imagemagick.app
          # 将 SVG 转换为 ICO
          magick convert -background none docs/images/logo-square-256.svg -define icon:auto-resize=256,128,64,48,32,16 OCRmyPDF.ico

      - name: Update spec file for macOS
        if: runner.os == 'macOS'
        run: |
          sed -i '' 's|icon=.*|icon="OCRmyPDF.icns",|' gui.spec

      - name: Update spec file for Windows
        if: runner.os == 'Windows'
        run: |
          (Get-Content gui.spec) -replace 'icon=.*', 'icon="OCRmyPDF.ico",' | Set-Content gui.spec

      - name: Build with PyInstaller
        run: |
          pyinstaller --clean gui.spec

      - name: Package Application (macOS)
        if: runner.os == 'macOS'
        run: |
          cd dist
          zip -r "OCRmyPDF-GUI-macos-${{ matrix.arch }}.zip" "OCRmyPDF-GUI.app"

      - name: Package Application (Windows)
        if: runner.os == 'Windows'
        run: |
          cd dist
          Compress-Archive -Path "OCRmyPDF-GUI" -DestinationPath "OCRmyPDF-GUI-windows-${{ matrix.arch }}.zip"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OCRmyPDF-GUI-${{ runner.os }}-${{ matrix.arch }}
          path: dist/OCRmyPDF-GUI-*-${{ matrix.arch }}.zip
          if-no-files-found: error

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: OCRmyPDF-GUI-*/*.zip
          draft: true
          generate_release_notes: true
